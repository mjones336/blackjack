{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dealerNumCards","playerNumCardsHand1","playerNumCardsHand2","pVal1","pVal2","pBet1","pBet2","dVal","hand1Border","hand2Border","lastPythonResponse","undefined","newPyResponse","App","props","game","setState","tab","document","getElementsByClassName","classList","remove","add","simulate","state","showTab","this","className","href","src","alt","height","width","aria-controls","aria-expanded","aria-label","data-target","data-toggle","type","id","onClick","style","backgroundColor","borderStyle","React","Component","Simulate","addThousandSep","input","res","toString","replace","sliderUpdate","event","target","name","value","startPySim","curr_component","calculating","Promise","fulfill","reject","console","log","percentOpt","numHands","fetch","method","body","JSON","stringify","then","response","text","resTxt","getUpdate","simResult","lastPercentOpt","lastNumHands","json","buttonBasePosn","runSimButton","class","fontWeight","fontSize","borderColor","disabled","result","position","left","top","aria-describedby","marginLeft","min","max","step","onChange","onInput","color","rel","Game","componentWillMount","playAgain","talkToPython","action","pythonResponse","newResp","deepEqual","x","y","ok","Object","keys","tx","length","every","key","placeBet","betAmount","gameState","prevBet","balance","Math","round","setTimeout","deal","starthands","gameParams","playerHand1","dealerHand","guide","createCards","whoseTurn","dealAnimation","numCards","player","split","dealerFinish","delay","animation","dealCards","hasSplit","handNum","card1","animationName","animationDelay","push","card2","i","card","showCurrentCardsPerm","splitEvent","turn","unhighlightHands","unhighlightLegalMoves","cleanShownCards","activeHand","legalMoves","optimalMove","highlightActiveHand","highlightLegalMoves","whoseTurn1","hand","cards","stand","bust","allow_split","allow_double","possible_moves","optimal_move","hand_num","whoseTurn2","playMove","move","play","alert","playerHand2","unhighlightHandsStand","dealerDrawNum","dispResults1s","dispResultsNow","participant","handSize","ele","animationIterationCount","visibility","el","playerBasePos","numCardsToShow","splice","forEach","cardNum","leftPosn","topPosn","playerCards1","image","backgroundImage","CARD_HEIGHT","CARD_WIDTH","dispVal","playerValue1","zIndex","parseInt","betHand1","BORDER_SIZE","playerCards2","playerValue2","margin","padding","betHand2","dealerCards","dealerValue","isDeal","holeCard","dealerBasePos","cardsToShow","newBalance","localStorage","getItem","setItem","roundOrGame","toLowerCase","hand1Cards","hand2Cards","dc","h1","h2","bettingButtons","playButtons","localHiScore","dealing","map","idx","Betting","componentDidMount","bet","noBetAlert","addChip","chipValue","currBalance","maxBetReached","clearBets","chipsButtons","maxBetAlert","autoFocus","Play","getElementById","checked","toggleOptCheckbox","optimalChecked","showResults","playAgainButton","showPlayerCards1","showPlayerCards2","showDealerCards","showPlayButtons","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f212728.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './bootstrap_18Apr20.css';\n\n\nvar reactTest = false\nvar counter = 1  // NPM RUN START DRIVER\nconst CARD_SPACING_X = 12\nconst CARD_SPACING_Y = 11\nconst SPLIT_X_SPACING = 160\nconst CARD_WIDTH = '80'\nconst CARD_HEIGHT = '120'\nconst BORDER_SIZE = 10\nconst INTEGRATE_PX = 7.5\nconst START_BAL = 100\nvar dealerNumCards = 0\nvar playerNumCardsHand1 = 0\nvar playerNumCardsHand2 = 0\nvar pVal1 = null\nvar pVal2 = null\nvar pBet1 = null\nvar pBet2 = null\nvar dVal = null\nvar hand1Border = null\nvar hand2Border = null\nvar lastPythonResponse = undefined\nvar newPyResponse = undefined\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tab: 'game'\n    }\n  }\n\n  render () {\n    let showTab = null\n    if (this.state.tab === \"game\") {\n      showTab =  (<Game \n                    simulate = {this.simulate}\n                  />)\n    } else if (this.state.tab === \"simulate\") {\n      showTab = (<Simulate \n                  game = {this.game}\n                />)\n    }\n\n    return (\n    <div className=\"App\">\n        <nav className=\"navbar navbar-expand-md navbar-light bg-light border navigationBar\">\n          <a className=\"navbar-brand\" href=\"/\"><img src={process.env.PUBLIC_URL + '/twitter_header_photo_1.png'} alt=\"Blackjack-play logo\" height=\"70\" width=\"210\"></img> </a>\n          <button aria-controls=\"navbar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" className=\"navbar-toggler\" data-target=\"#navbar\" data-toggle=\"collapse\" type=\"button\">\n              <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbar\">\n            <ul className=\"navbar-nav mr-auto mt-2\">\n              <li className=\"gameTab nav-item active\"><button className=\"nav-link\" onClick={this.game} style={{backgroundColor: 'transparent', borderStyle: 'none'}}><b><h4>&nbsp; &nbsp;Play &nbsp; &nbsp;</h4></b></button></li>\n              <li>   </li>\n              <li className=\"simulateTab nav-item\"><button className=\"nav-link\" onClick={this.simulate} style={{backgroundColor: 'transparent', borderStyle: 'none'}}><b><h4>&nbsp; &nbsp; Monte Carlo Simulations &nbsp; &nbsp;</h4></b></button></li>\n            </ul>\n          </div>\n            <span className=\"rightAlign\"> Created by Mark Jones.</span>\n        </nav>\n      {showTab}\n    </div>  \n    )\n  }\n\n  game = () => {\n    this.setState({\n      tab: 'game'\n    })\n    // set 'active' tab to 'game' via bootstrap classes\n    document.getElementsByClassName('simulateTab')[0].classList.remove('active')\n    document.getElementsByClassName('gameTab')[0].classList.add('active')\n  }\n\n  simulate = () => {\n    this.setState({\n      tab: 'simulate'\n    })\n    // set 'active' tab to 'simulate' via bootstrap classes\n    document.getElementsByClassName('gameTab')[0].classList.remove('active')\n    document.getElementsByClassName('simulateTab')[0].classList.add('active')\n  }\n\n}\nexport default App;\n\n\nvar INPUT_WIDTH = 313\n\nclass Simulate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      buttonBasePosn: ['10%', 250],\n      percentOpt: 90, \n      numHands: 10000,\n      calculating: false,\n      lastPercentOpt: '',\n      lastNumHands: '',\n      simResult: ''\n    }\n  }\n\n  render () {\n    let runSimButton = undefined\n    if (this.state.calculating) {\n      runSimButton = (<span><button type=\"submit\" class=\"btn btn-primary\" onClick={this.startPySim} style={{fontWeight:'bold', fontSize:'25px', borderStyle:'solid',borderColor:'black'}} disabled>Run Simulations</button> <div className=\"simInputText\"> &nbsp; Calculating...</div></span>)\n    } else {\n      runSimButton = (<span><button type=\"submit\" class=\"btn btn-primary\" onClick={this.startPySim} style={{fontWeight:'bold', fontSize:'25px', borderStyle:'solid',borderColor:'black'}}>Run Simulations</button> <div className=\"simInputText\"> &nbsp;</div></span>)\n    }\n\n    let result = undefined\n    if (this.state.simResult) {\n      result = (<div className=\"simResult\">\n                  <b style={{fontWeight:'bold'}}>Simulations Completed</b>\n                  <hr></hr>\n                  Number of Hands Played: {this.addThousandSep(this.state.lastNumHands)}<br></br>\n                  Optimal Strategy Usage: {this.state.lastPercentOpt}%<br></br>\n                  House Edge: {this.state.simResult}%\n                </div>)\n    }\n    \n    return (\n      <div className=\"simulateBg\">\n        <div className=\"simulateDesc\">\n          The 'House Edge' is the expected return of the Dealer/Casino.<br></br>\n          The House Edge is between 0.5-1% in most Blackjack games played with optimal strategy - the exact value depends on the rules.<br></br>\n          Run simulations below to see the impact on the House Edge of playing a portion of moves sub-optimally. \n        </div>\n        <div className=\"inputFields\" style={{position:'absolute', left:this.state.buttonBasePosn[0].toString(), top:this.state.buttonBasePosn[1].toString()+'px', width: (INPUT_WIDTH).toString()+'px'}}>\n         \n         {/* Number of Hands to Play */}\n         <div className=\"input-group mb-3 simInputButt\">\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Number of Hands to Play:</span>\n            </div>\n              <input type=\"text\" className=\"form-control\" aria-label=\"Default\" aria-describedby=\"inputGroup-sizing-default\" value={this.addThousandSep(this.state.numHands)} disabled></input>\n          </div>\n          <div>\n            <div className=\"form-group input-group mb-3\">\n              <div className=\"form-row form-group slidecontainer\" style={{marginLeft: '5px', width: (INPUT_WIDTH-10).toString()+'px'}}>\n                <input type=\"range\" name=\"numHands\" className=\"form-control-range slider\" id=\"numHands\" min=\"1000\" max=\"50000\" step=\"1000\" onChange={()=>{}} onInput={this.sliderUpdate} value={this.state.numHands}></input>\n              </div>\n            </div>\n          </div>\n          \n          {/* % SubOptimal Moves */}\n          <div className=\"input-group mb-3 simInputButt\" >\n            <div className=\"input-group-prepend\">\n              <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Optimal Strategy Usage:</span>\n            </div>\n            <input type=\"number\" className=\"form-control\" aria-label=\"Default\" aria-describedby=\"inputGroup-sizing-default\" value={this.state.percentOpt} disabled></input>\n            <div className=\"input-group-append\">\n              <span className=\"input-group-text\">%</span>\n            </div>\n          </div>\n          <div>\n            <div className=\"form-group input-group mb-3\">\n              <div className=\"form-row form-group slidecontainer\" style={{marginLeft: '5px', width: (INPUT_WIDTH-10).toString()+'px'}}>\n                <input type=\"range\" name=\"percentOpt\" className=\"form-control-range slider\" id=\"percentOpt\" min=\"0\" max=\"100\" step=\"1\" onChange={()=>{}} onInput={this.sliderUpdate} value={this.state.percentOpt}></input>\n              </div>\n            </div>\n          </div>\n          \n          {/* Run Simulation */}\n          {runSimButton}\n\n          {/* Description of methodology used */}\n          <div className=\"simMethodology\">\n            <b style={{fontWeight:'bold'}}>Methodology</b>\n            <br></br>\n            Sub-optimal decisions are randomly chosen from the remaining available legal moves after removing the optimal move. \n            <br></br>\n            <br></br>\n            <b style={{fontWeight:'bold'}}>Note</b>\n            <br></br>\n            1mm+ simulations will produce more consistent results, but in order to reduce calculation times, isn't an option.\n          </div>\n        </div>\n\n        {result}\n\n\n\n        <footer>\n          <a style={{color: 'white'}} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.freepik.com/free-photos-vectors/background\">Background photo created by freepik - www.freepik.com</a>\n        </footer>\n      </div>\n    )\n  }\n\n\n  addThousandSep = (input) => {\n    let res = input.toString()+'d'\n    res = res.replace('000d', ',000')\n    return res\n  }\n\n\n  sliderUpdate = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n\n  startPySim = () => {\n    let curr_component = this\n    curr_component.setState({\n      calculating: true\n    })\n    return new Promise(function(fulfill, reject){\n      console.log(`START PYTHON SIMULATION: %Optimal= ${curr_component.state.percentOpt}, numHands= ${curr_component.state.numHands}`);\n      fulfill(fetch('/simulate', {\n        // Specify the method\n        method: 'POST',\n        // A JSON payload\n        body: JSON.stringify({\n          \"params\": [curr_component.state.percentOpt, curr_component.state.numHands]\n        })\n      }));\n    }).then(function(response){\n      return response.text()\n    }).then(function(resTxt){\n        return new Promise(function(fulfill, reject){\n          console.log(`Python POST response: ${resTxt}`)\n          fulfill();\n        })\n    }).then(function(){\n      return new Promise(function(fulfill, reject){            \n        fulfill(\n          curr_component.getUpdate()\n        );\n      })\n    }).then(function(simResult){\n      return new Promise(function(fulfill, reject){            \n        curr_component.setState(state => {\n          return {\n            calculating: false,\n            simResult: simResult,\n            lastPercentOpt: state.percentOpt,\n            lastNumHands: state.numHands\n          }\n        })\n        fulfill(\n          simResult\n        );\n      })\n    })\n  }  \n\n      \n  getUpdate = () => {  \n    // let curr_component = this\n    return new Promise(function(fulfill, reject){\n      // setTimeout(() => fulfill(fetch('/update')), 150)  \n      fulfill(fetch('/simulationOutput'))\n    })\n    .then(function(res){\n        return new Promise(function(fulfill, reject){\n            // console.log(\"Data returned OK by Python\")\n            fulfill(res.json());\n        });\n    })\n  }\n\n\n}\n\n\nclass Game extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        gameState: 'bet',  // options: bet/play/calculating/results\n        guide: '',\n        result: '',\n        betHand1: null,\n        betHand2: null,\n        balance: START_BAL,\n        playerHand1: [],\n        playerHand2: [],\n        playerValue1: null,\n        playerValue2: null,\n        dealerValue: null,\n        playerCards1: [],\n        playerCards2: [],\n        handNum: 0,\n        dealerHand: [],\n        dealerCards: [],\n        turn: 'me',\n        prevBet: 0,\n        activeHand: null,\n        legalMoves: null,\n        optimalMove: '',\n        dealerBasePos: [678, 272],\n        playerBasePos: [678, 480],\n        dealCards: [],\n        hasSplit: false,\n        isDeal: true,\n      }\n  }\n\n  \n  componentWillMount = () => {\n    this.playAgain('round')\n  }\n\n\n  render() {\n    let bettingButtons = undefined\n    let playButtons = undefined\n    \n    let localHiScore = ''\n    if (parseInt(localStorage.getItem('highScore')) > 100) {\n      localHiScore = 'High Score: $'+(Math.round((parseInt(localStorage.getItem('highScore')) + 0.00001) * 100) / 100).toString()\n    }\n\n    const dealing = this.state.dealCards.map((card, idx) => {\n        return card\n    })\n\n    const show = () => {\n      if (this.state.gameState === 'bet') {\n        bettingButtons = <Betting \n                          placeBet = {this.placeBet}\n                          balance = {this.state.balance}\n                          prevBet = {this.state.prevBet}\n                         />\n      }\n      else {  // play or results\n        playButtons = <Play \n                        // play\n                        playerHand1 = {this.state.playerHand1}\n                        playerHand2 = {this.state.playerHand2}\n                        playerCards1 = {this.state.playerCards1}\n                        playerCards2 = {this.state.playerCards2}\n                        playerValue1 = {this.state.playerValue1}\n                        playerValue2 = {this.state.playerValue2}\n                        dealerValue = {this.state.dealerValue}\n                        betHand1 = {this.state.betHand1}\n                        betHand2 = {this.state.betHand2}\n                        balance = {this.state.balance}\n                        dealerHand = {this.state.dealerHand}\n                        dealerCards = {this.state.dealerCards}\n                        optimalMove = {this.state.optimalMove}\n                        playMove = {this.playMove}\n                        // results\n                        result = {this.state.result}\n                        playAgain = {this.playAgain}\n                        gameState = {this.state.gameState}\n                      />\n      }\n    }\n    show()\n\n    return (\n      <div className=\"bgImg\">\n        <div className=\"shoeImg\"></div>\n        <div className=\"cardBackImgConstant\"></div>\n        {dealing}\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\"></link>\n        <div className=\"defStyle\" style={{left:'35px', top:'100px'}}> <a style={{color: 'white'}} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://bicyclecards.com/how-to-play/blackjack/\">Rules <i className=\"fa fa-external-link\"></i></a></div>\n        <div>{bettingButtons}</div>\n        <div>{playButtons}</div>\n        <div className=\"balance\">\n          {localHiScore}\n          <br></br>\n          Balance: ${this.state.balance}\n        </div>\n      </div>\n    );\n  }\n\n\n  componentDidMount() {\n    // setup game in Python\n    // NPM RUN START DRIVER\n    if (!reactTest) {\n      this.talkToPython('setup', 'me')\n    }\n    try {\n      localStorage.getItem('highScore')\n    } catch {\n      localStorage.setItem('highScore', START_BAL)\n    }\n  }\n\n\n  talkToPython = (action, value) => {\n    let curr_component = this\n    return new Promise(function(fulfill, reject){\n        console.log(`TALKTOPYTHON START ACTION: ${action}, VALUE: ${value}`)\n        fulfill(\n            fetch('/action', {\n            // Specify the method\n            method: 'POST',\n            \n            // A JSON payload\n            body: JSON.stringify({\n                \"action\": [action, value]\n                })\n            })\n        );\n    }).then(function(response){\n      return response.text()\n    }).then(function(resTxt){\n        return new Promise(function(fulfill, reject){\n          // DO THIS\n          console.log(resTxt)\n          if (resTxt === 'OK') \n          {\n            fulfill(resTxt);\n          }  \n        });\n    }).then(function(pythonResponse){\n        return new Promise(function(fulfill, reject){\n          fulfill(\n            // console.log(`Python POST response: ${pythonResponse}`)\n          );\n        });\n    }).then(function(){\n      return new Promise(function(fulfill, reject){\n        console.log(`TALKTOPYTHON END ACTION: ${action}, VALUE: ${value}`)\n        fulfill(\n          curr_component.getUpdate()\n        );\n      });\n    })\n  }  \n      \n  getUpdate = () => {  \n    let curr_component = this\n    return new Promise(function(fulfill, reject){\n      // setTimeout(() => fulfill(fetch('/update')), 150)  \n      fulfill(fetch('/update'))\n    })\n    .then(function(res){\n        return new Promise(function(fulfill, reject){\n            // console.log(\"Data returned OK by Python\")\n            fulfill(res.json());\n        });\n    }).then(function(newResp){\n      return new Promise(function(fulfill, reject){\n        // console.log('newPythonResp')\n        newPyResponse = newResp\n        // console.log(newPyResponse)\n        while (curr_component.deepEqual(newPyResponse, lastPythonResponse)) {\n          // alert('consecutive duplicate python response')\n          // console.log('ACTIVATED')\n          // newPyResponse = fetch('/update').json()\n          // setTimeout(() => newPyResponse = curr_component.getUpdate(), 100)  \n          newPyResponse = curr_component.getUpdate()  \n        }\n        lastPythonResponse = newPyResponse\n        // console.log('last python response!')\n        // console.log(lastPythonResponse)\n        fulfill(\n          newPyResponse\n        );\n      });\n    })\n  }\n\n  deepEqual = (x, y) => {\n    const ok = Object.keys, tx = typeof x, ty = typeof y;\n    return x && y && tx === 'object' && tx === ty ? (\n      ok(x).length === ok(y).length &&\n        ok(x).every(key => this.deepEqual(x[key], y[key]))\n    ) : (x === y);\n  }\n\n  placeBet = (betAmount) => {\n    let curr_component = this;\n    new Promise(function(fulfill, reject){\n      // change state, re-render\n      pBet1 = betAmount\n      curr_component.setState(state => ({\n        gameState: 'play',\n        prevBet: betAmount,\n        balance: Math.round((state.balance-betAmount + 0.00001) * 100) / 100\n      }))\n      // send bet amount to Python\n      // NPM RUN START DRIVER\n      if (!reactTest) {\n        curr_component.talkToPython('bet', betAmount)  \n      }\n      fulfill();\n    }).then(function(){\n        return new Promise(function(fulfill, reject){\n          // deal cards from Python\n          setTimeout(() => {\n            curr_component.deal()\n          }, 150)\n          fulfill();\n        });\n    })\n  }\n\n\n  deal = () => {\n    let curr_component = this;\n    new Promise(function(fulfill, reject){\n      console.log('deal')\n      // NPM RUN START DRIVER\n      if (!reactTest) {\n        fulfill(curr_component.talkToPython('deal', null));\n      } else {\n        fulfill(\n          {me: [{cards: [[9, 'D'], [9, 'C']], value: [18, 'hard'], stand: false, bust: false, allow_split: true, allow_double: true}], Dealer: [{cards: [['7', 'D']], value: 7, stand: false, bust: false, allow_split: true, allow_double: true}]}\n        )\n    } \n    }).then(function(starthands){\n        return new Promise(function(fulfill, reject){\n          console.log('starthands =')\n          console.log(starthands)  \n          fulfill(starthands);\n        });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        pVal1 = gameParams['me'][0]['value'][0]\n        dVal = gameParams['Dealer'][0]['value']\n        curr_component.setState({\n          playerHand1: gameParams['me'][0]['cards'],\n          dealerHand: gameParams['Dealer'][0]['cards'],\n          gameState: 'play',\n          guide: 'Choose to Hit, Stand, Double, or Split!'\n        })\n        curr_component.createCards('me')\n        curr_component.createCards('dealer')\n        setTimeout(() => {\n          curr_component.whoseTurn()  \n        },150)\n        curr_component.dealAnimation(2, 'me', false, false)\n        fulfill();\n      })\n    })\n    .then(function(){\n      return new Promise(function(fulfill, reject){\n          curr_component.dealAnimation(2, 'dealer', false, false)\n      })\n    })\n  }\n\n\n  dealAnimation = (numCards, player, split, dealerFinish) => {\n  //starts animations to deal cards to hand\n    let delay = 0\n    let animation = null\n    let dealCards = [...this.state.dealCards]\n    // get correct animations to ell cards where to move to\n    if (player === 'me') {\n      if (this.state.hasSplit) {\n        if (this.state.handNum === 0) {\n          animation = 'dealPlayer1'\n        } else if (this.state.handNum === 1) {\n          animation = 'dealPlayer2'\n        }\n      } else {\n        animation = 'dealPlayer'\n      }\n    } else {\n      animation = 'dealDealer'\n    }\n    if (!split) {\n      // adjust\n      if (dealerFinish) {\n        delay++;\n        for (let dHand of document.getElementsByClassName('dealerCards')) {\n          dHand.style.animationDelay='2s'\n        }\n      }\n      for (let i = 0; i < numCards; i++) {\n        // create card\n        const card = (<div className=\"cardBackImg\" style={{animationName: animation, animationDelay: (delay).toString()+'s'}}></div>)\n        dealCards.push(card)\n        delay+=0.15;\n      }\n    } else {\n      // split\n      const card1 = (<div className=\"cardBackImg\" style={{animationName: 'dealPlayer1', animationDelay: (delay).toString()+'s'}}></div>)\n      dealCards.push(card1)\n      delay+=0.15; \n      const card2 = (<div className=\"cardBackImg\" style={{animationName: 'dealPlayer2', animationDelay: (delay).toString()+'s'}}></div>)\n      dealCards.push(card2)\n      delay+=0.15; \n\n      // ADJUST\n      // // show second hand \n      // for (let ele of document.getElementsByClassName('dispHand2')) {\n      //   ele.style.animationName= 'show'\n      // }\n    }\n\n    this.setState({\n      dealCards\n    })\n\n    this.showCurrentCardsPerm()\n\n    // show dealer cards and value\n    if (player === 'dealer' && !dealerFinish) {\n      // adjust\n      for (let hole of document.getElementsByClassName('dealerHole')) {\n        hole.classList.add(\"cardsShown\")\n      }\n      for (let dh of document.getElementsByClassName('dealerCards')) {\n        dh.classList.add(\"cardsShown\")\n      }  \n      for (let ele of document.getElementsByClassName('dealerValue')) {\n        ele.style.animationName= 'show'\n      }\n    } else if (dealerFinish) {\n      document.getElementsByClassName('dealerValue')[0].style.animationName= 'none'\n      setTimeout(() => {\n        // document.getElementsByClassName('dealerValue')[0].style.animationDelay= '0s'\n        document.getElementsByClassName('dealerValue')[0].style.animationName= 'show'\n      }, 1000)\n    }\n  }\n\n\n  whoseTurn = (splitEvent) => {\n    console.log('START WHOSE TURN')\n    let curr_component = this;\n    new Promise(function(fulfill, reject){\n      // NPM RUN START DRIVER\n      if (!reactTest) {\n        fulfill(curr_component.talkToPython('whoseTurn', null));\n      } else {\n        fulfill(\n          {turn: 'me', hand: {cards: [[9, 'D'], [9, 'C']], value: [18, 'hard'], stand: false, bust: false, allow_split: true, allow_double: true}, possible_moves: ['Hit', 'Stand', 'Split', 'Double'], optimal_move: 'Stand', hand_num: 0}\n          )\n      }\n    }).then(function(turn){\n        return new Promise(function(fulfill, reject){\n          console.log('Turn =')\n          console.log(turn)  \n          fulfill(turn);\n        });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        // turn changes\n        if (gameParams['turn'] !== curr_component.state.turn || gameParams['hand_num'] !== curr_component.state.handNum) {\n          curr_component.unhighlightHands()\n        } \n        curr_component.unhighlightLegalMoves()\n        curr_component.cleanShownCards()\n        fulfill(gameParams);\n      });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        fulfill(\n          curr_component.setState({\n            turn: gameParams['turn'],\n            activeHand: gameParams['hand'], \n            legalMoves: gameParams['possible_moves'],\n            optimalMove: gameParams['optimal_move'],\n            handNum: gameParams['hand_num']\n          })\n        )\n      });\n    }).then(function(){ \n      return new Promise(function(fulfill, reject){\n        if (splitEvent) {\n          // setTimeout(() => {\n            curr_component.highlightActiveHand()\n          // }, 1000)\n        } else {\n          curr_component.highlightActiveHand()\n        }\n        curr_component.highlightLegalMoves()\n        fulfill()\n      });\n    })\n  }\n\n\n  // NPM RUN START DRIVER\n  whoseTurn1 = () => {\n    let curr_component = this;\n    new Promise(function(fulfill, reject){\n      fulfill(\n        {turn: 'me', hand: {cards: [[9, 'D'], ['Q', 'H']], value: [19, 'hard'], stand: false, bust: false, allow_split: false, allow_double: false}, possible_moves: ['Hit', 'Stand'], optimal_move: 'Stand', hand_num: 0}\n      )\n    }).then(function(turn){\n        return new Promise(function(fulfill, reject){\n          console.log('Turn =')\n          console.log(turn)  \n          fulfill(turn);\n        });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        if (gameParams['turn'] !== curr_component.state.turn || gameParams['hand_num'] !== curr_component.state.handNum) {\n        } \n        curr_component.unhighlightHands()\n        curr_component.unhighlightLegalMoves()\n        curr_component.cleanShownCards()\n        fulfill(gameParams);\n      });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        curr_component.setState({\n          turn: gameParams['turn'], \n          activeHand: gameParams['hand'], \n          legalMoves: gameParams['possible_moves'],\n          optimalMove: gameParams['optimal_move'],\n          handNum: gameParams['hand_num']\n        })\n        fulfill()\n      });\n    }).then(function(){ \n      curr_component.highlightActiveHand()\n      curr_component.highlightLegalMoves()\n    })\n  }\n\n\n  // NPM RUN START DRIVER\n  whoseTurn2 = () => {\n    let curr_component = this;\n    new Promise(function(fulfill, reject){\n      fulfill(\n        {turn: 'me', hand: {cards: [[9, 'D'], ['2', 'D']], value: [11, 'hard'], stand: false, bust: false, allow_split: false, allow_double: false}, possible_moves: ['Hit', 'Stand'], optimal_move: 'Hit', hand_num: 1}\n      )\n    }).then(function(turn){\n        return new Promise(function(fulfill, reject){\n          console.log('Turn =')\n          console.log(turn)  \n          fulfill(turn);\n        });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        if (gameParams['turn'] !== curr_component.state.turn || gameParams['hand_num'] !== curr_component.state.handNum) {\n        } \n        curr_component.unhighlightHands()\n        curr_component.unhighlightLegalMoves()\n        curr_component.cleanShownCards()\n        fulfill(gameParams);\n      });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        curr_component.setState({\n          turn: gameParams['turn'],\n          activeHand: gameParams['hand'], \n          legalMoves: gameParams['possible_moves'],\n          optimalMove: gameParams['optimal_move'],\n          handNum: gameParams['hand_num']\n        })\n        fulfill()\n      });\n    }).then(function(){ \n      curr_component.highlightActiveHand()\n      curr_component.highlightLegalMoves()\n    })\n  }\n\n\n  playMove = (move) => {\n    let curr_component = this;\n    new Promise(function(fulfill, reject){\n      // NPM RUN START DRIVER\n      if (!reactTest) {\n        fulfill(curr_component.talkToPython('play', move)  );\n      } else {\n        if (move === 'Split') {\n          fulfill(\n            {hand_num: 0, player_hand: {me: [{cards: [[9, 'D'], ['Q', 'H']], value: [19, 'hard'], stand: false, bust: false, allow_split: false, allow_double: false}, {cards: [[9, 'C'], ['2', 'D']], value: [11, 'hard'], stand: false, bust: false, allow_split: false, allow_double: false}]}, dealer_hand: [{cards: [['7', 'D']], value: 7, stand: false, bust: false, allow_split: true, allow_double: true}], round_finished: false, result: null, balance: -10, bets: [5, 5]}\n            )\n        } else if (move === 'Hit') {\n          fulfill(\n            {hand_num: 0, player_hand: {me: [{cards: [[9, 'D'], ['Q', 'H'], ['J', 'S']], value: [29, 'hard'], stand: false, bust: true, allow_split: false, allow_double: false}, {cards: [[9, 'C'], ['2', 'D']], value: [11, 'hard'], stand: false, bust: false, allow_split: false, allow_double: false}]}, dealer_hand: [{cards: [['7', 'D']], value: 7, stand: false, bust: false, allow_split: true, allow_double: true}], round_finished: false, result: null, balance: -10, bets: [5, 5]}\n          )\n        } else if (move === 'Stand') {\n          fulfill(\n            {hand_num: 1, player_hand: {me: [{cards: [[9, 'D'], ['Q', 'H'], ['J', 'S']], value: [29, 'hard'], stand: false, bust: true, allow_split: false, allow_double: false}, {cards: [[9, 'C'], ['2', 'D']], value: [11, 'hard'], stand: true, bust: false, allow_split: false, allow_double: false}]}, dealer_hand: [{cards: [['7', 'D'], ['7', 'H'], ['3', 'C']], value: [17, 'hard'], stand: true, bust: false, allow_split: false, allow_double: false}], round_finished: true, result: \"Your hands lose $10, and lose $10!\", balance: -10, bets: [5, 5]}\n          )\n        }\n      }       \n    }).then(function(play){\n        return new Promise(function(fulfill, reject){\n          console.log('Play =')\n          console.log(play)  \n          fulfill(play);\n        });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        // false means illegal move\n        if (gameParams['player_hand'] === false) {\n          if ((move === 'Split' || move === 'Double') && curr_component.state.balance < curr_component.state.prevBet) {\n            alert(`Insufficient Balance to ${move}!`) // illegal move due to insuff balance\n          } else {\n            alert('Illegal move')  // illegal move\n          }\n          reject()\n        } else {\n          // update vars:\n          // GENERAL \n          pVal1 = gameParams['player_hand']['me'][0]['value'][0]\n          dVal = gameParams['dealer_hand'][0]['value']\n          pBet1 = gameParams['bets'][0]\n          pBet2 = gameParams['bets'][1]\n          // HAND 1\n          curr_component.setState({\n            playerHand1: gameParams['player_hand']['me'][0]['cards'],\n            balance: gameParams['balance'],\n            dealerHand: gameParams['dealer_hand'][0]['cards']\n          })\n          // HAND 2\n          if (gameParams['player_hand']['me'].length === 2) {\n            pVal2 = gameParams['player_hand']['me'][1]['value'][0]\n            curr_component.setState({\n              playerHand2: gameParams['player_hand']['me'][1]['cards'],\n              dealerHand: gameParams['dealer_hand'][0]['cards']\n            })\n          }\n        }\n        fulfill(gameParams)\n      });\n    }).then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        if (move === 'Split') {\n          // does sliding card animations\n          curr_component.createCards('me', 'split')\n          curr_component.setState({\n            hasSplit: true\n          })\n          curr_component.dealAnimation(2, 'me', true, false)\n          curr_component.unhighlightHands()\n        } else if (move === 'Hit' || move === 'Double'){\n          curr_component.createCards('me')\n          curr_component.dealAnimation(1, 'me', false, false)\n          curr_component.unhighlightHands()\n        } else if (move === 'Stand') {\n          curr_component.unhighlightHandsStand()\n        }\n        fulfill(gameParams)\n      });\n    })\n    .then(function(gameParams){\n      return new Promise(function(fulfill, reject){\n        // round finished: show round results\n      if (gameParams['round_finished']) {\n          dVal = gameParams['dealer_hand'][0]['value'][0]\n          curr_component.createCards('dealer')\n          const dealerDrawNum = gameParams['dealer_hand'][0]['cards'].length - 2\n          // dealer draws - show value after 1 second delay\n          if (dealerDrawNum > 0) {\n            curr_component.dealAnimation(dealerDrawNum, 'dealer', false, true)\n            curr_component.dispResults1s(gameParams)\n          } else {\n          // dealer stands - show value immediately\n          curr_component.dispResultsNow(gameParams)\n        }\n        // ADJUST\n        // curr_component.showCurrentCardsPerm()\n      } else {\n          // NPM RUN START DRIVER\n          if (!reactTest) {\n            setTimeout(() => {\n              if (move === 'Split') {\n                curr_component.whoseTurn(true)  \n              } else {\n                curr_component.whoseTurn()  \n              }\n            }, 150)\n          } else {\n            if (counter===1) {\n              curr_component.whoseTurn1()\n              counter++;\n            } else if (counter===2) {\n              curr_component.whoseTurn2()\n              counter++;\n            }\n          }\n        }\n      })\n    })\n  }\n\n\n  createCards = (participant, splitEvent) => {\n    // calculate if any new cards added, then turn array into file string\n    let handSize = 0\n    let hand = null\n\n    if (splitEvent) {\n      // animations to slide cards to side\n      let cards = document.getElementsByClassName('splitCards')\n      cards[0].classList.add('slideL')\n      cards[1].classList.add('slideR')\n      while(cards.length > 0){\n        cards[0].classList.remove('splitCards');\n      }\n      \n      let slideL = document.getElementsByClassName('slideL')[0]\n      for (let ele of [slideL]) {\n        ele.classList.remove(\"cardsShown\")\n        ele.style.animationIterationCount = 1\n        ele.style.animationName= 'slideLeft'\n        ele.style.left = '610px'\n        ele.style.top = '480px'\n        ele.style.visibility = 'visible'\n      }\n      let slideR = document.getElementsByClassName('slideR')[0]\n      for (let el of [slideR]) {\n        el.classList.remove(\"cardsShown\")\n        el.style.animationIterationCount = 1\n        el.style.animationName= 'slideRight'\n        el.style.left = '770px'\n        el.style.top = '480px'\n        el.style.visibility = 'visible'\n      }\n\n      this.setState(state => {\n        return {\n          playerBasePos: [610, 480],\n        }\n      })\n      playerNumCardsHand1 = 0\n      playerNumCardsHand2 = 0\n    }\n    \n    if (participant === 'me') {\n      if (this.state.handNum === 0 || splitEvent) {\n        handSize = this.state.playerHand1.length\n        hand = [...this.state.playerHand1]\n        // check handSize vs num cards currently displayed to tell if more cards required\n        const numCardsToShow = handSize - playerNumCardsHand1\n        if (numCardsToShow > 0) {\n          // take this many cards off the end player's hand\n          let cardsToShow = hand.splice(-numCardsToShow, numCardsToShow)\n          // alert(cardsToShow)\n          cardsToShow.forEach((card, cardNum) => {\n            // alert(`card ${card}`)\n            this.setState(state => {\n              let leftPosn = state.playerBasePos[0] + (CARD_SPACING_X * playerNumCardsHand1)\n              // alert(`left position ${leftPosn}`)\n              let topPosn = state.playerBasePos[1] + (CARD_SPACING_Y * playerNumCardsHand1)\n              // alert(`top position ${topPosn}`)\n              let playerCards1 = [...state.playerCards1]\n              let image = card[0].toString() + card[1].toString()\n              playerCards1.push(<div className=\"hand1Cards splitCards cardBg\" style={{visibility: 'hidden', backgroundImage:\"url('/playing_cards/\"+image+\".png')\", height:CARD_HEIGHT+'px', width:CARD_WIDTH+'px', position:\"absolute\", left:leftPosn.toString()+'px', top:topPosn.toString()+'px'}}></div>)\n              const dispVal = pVal1 <= 21 ? pVal1 : 'Bust'\n              const playerValue1 = (<div className=\"hand1 handValue\" style={{visibility: 'hidden', zIndex: 1, position:\"absolute\", left:(state.playerBasePos[0]+parseInt(CARD_WIDTH)+CARD_SPACING_X+BORDER_SIZE-INTEGRATE_PX).toString()+'px', top:(state.playerBasePos[1]-BORDER_SIZE).toString()+'px'}}>{dispVal}</div>)\n              const betHand1 = (<div className=\"hand1 handValue\" style={{visibility: 'hidden', zIndex: 1, position:\"absolute\", left:(state.playerBasePos[0]+parseInt(CARD_WIDTH)*0.35).toString()+'px', top:(state.playerBasePos[1]-BORDER_SIZE-25+INTEGRATE_PX).toString()+'px'}}>${pBet1}</div>)\n              return {\n                playerCards1,\n                playerValue1,\n                betHand1\n              }\n            })\n            playerNumCardsHand1++;\n            // border for cards\n            hand1Border = <div className=\"cards hand1\" style={{visibility: 'hidden', height:(parseInt(CARD_HEIGHT) + parseInt(CARD_SPACING_Y)*(playerNumCardsHand1-1)+BORDER_SIZE*2).toString()+'px', width:(parseInt(CARD_WIDTH) + parseInt(CARD_SPACING_X)*(playerNumCardsHand1-1)+BORDER_SIZE*2).toString()+'px', position:\"absolute\", left:(this.state.playerBasePos[0]-BORDER_SIZE).toString()+'px', top:(this.state.playerBasePos[1]-BORDER_SIZE).toString()+'px'}}></div>\n          })\n        }\n      } \n      if (this.state.handNum === 1 || splitEvent) {\n        handSize = this.state.playerHand2.length\n        hand = [...this.state.playerHand2]\n        // check handSize vs num cards currently displayed to tell if more cards required\n        const numCardsToShow = handSize - playerNumCardsHand2\n        if (numCardsToShow > 0) {\n          // take this many cards off the end player's hand\n          let cardsToShow = hand.splice(-numCardsToShow, numCardsToShow)\n          // alert(cardsToShow)\n          cardsToShow.forEach((card, cardNum) => {\n            // alert(`card ${card}`)\n            this.setState(state => {\n              let leftPosn = state.playerBasePos[0] + (CARD_SPACING_X * playerNumCardsHand2) + SPLIT_X_SPACING\n              // alert(`left position ${leftPosn}`)\n              let topPosn = state.playerBasePos[1] + (CARD_SPACING_Y * playerNumCardsHand2)\n              // alert(`top position ${topPosn}`)\n              let playerCards2 = [...state.playerCards2]\n              let image = card[0].toString() + card[1].toString()\n              playerCards2.push(<div className=\"hand2Cards cardBg\" style={{visibility: 'hidden', backgroundImage:\"url('/playing_cards/\"+image+\".png')\", height:CARD_HEIGHT+'px', width:CARD_WIDTH+'px', position:\"absolute\", left:leftPosn.toString()+'px', top:topPosn.toString()+'px'}}></div>)\n              const dispVal = pVal2 <= 21 ? pVal2 : 'Bust'\n              const playerValue2 = (<div className=\"dispHand2 handValue hand2\" style={{visibility: 'hidden', zIndex: 1, margin: 0, padding: 0, position:\"absolute\", left:(state.playerBasePos[0]+parseInt(CARD_WIDTH)+CARD_SPACING_X+SPLIT_X_SPACING+BORDER_SIZE-INTEGRATE_PX).toString()+'px', top:(state.playerBasePos[1]-BORDER_SIZE).toString()+'px'}}>{dispVal}</div>)\n              const betHand2 = (<div className=\"dispHand2 handValue hand2\" style={{visibility: 'hidden', zIndex: 1, position:\"absolute\", left:(state.playerBasePos[0]+parseInt(CARD_WIDTH)*0.37+SPLIT_X_SPACING).toString()+'px', top:(state.playerBasePos[1]-BORDER_SIZE-25+INTEGRATE_PX).toString()+'px'}}>${pBet2}</div>)\n              return {\n                playerCards2,\n                playerValue2,\n                betHand2\n              }\n            })\n            playerNumCardsHand2++;\n            // border for cards\n            hand2Border = <div className=\"cards hand2\" style={{visibility: 'hidden', height:(parseInt(CARD_HEIGHT) + parseInt(CARD_SPACING_Y)*(playerNumCardsHand1-1)+BORDER_SIZE*2).toString()+'px', width:(parseInt(CARD_WIDTH) + parseInt(CARD_SPACING_X)*(playerNumCardsHand1-1)+BORDER_SIZE*2).toString()+'px', position:\"absolute\", left:(this.state.playerBasePos[0]+SPLIT_X_SPACING-BORDER_SIZE).toString()+'px', top:(this.state.playerBasePos[1]-BORDER_SIZE).toString()+'px'}}></div>\n          })\n        }\n      }\n    } else if (participant === 'dealer') {\n      let dealerCards = [...this.state.dealerCards]\n      let dealerValue = null\n      \n      // if not initial deal, show hole card (second card from Python) in first card's position\n      if (!this.state.isDeal) {\n        const holeCard = this.state.dealerHand[1]\n        let image = holeCard[0].toString() + holeCard[1].toString()\n        // overwrite first card (facedown hole card)\n        dealerCards[0] = <div className=\"cardBg\" style={{backgroundImage:\"url('/playing_cards/\"+image+\".png')\", height:CARD_HEIGHT+'px', width:CARD_WIDTH+'px', position:\"absolute\", left:this.state.dealerBasePos[0].toString()+'px', top:this.state.dealerBasePos[1].toString()+'px'}}></div>\n        const dispVal = dVal <= 21 ? dVal : 'Bust'\n        dealerValue = (<div className=\"dealerValue\" style={{visibility: 'hidden', position:\"absolute\", left:(this.state.dealerBasePos[0]+parseInt(CARD_WIDTH)+CARD_SPACING_X+3).toString()+'px', top:(this.state.dealerBasePos[1]-3).toString()+'px'}}>{dispVal}</div>)\n        // this.setState(state => {\n          // let dealerHand = [...state.dealerHand]\n          // dealerHand = dealerHand.splice(1,1)  // remove both dealer \n          // return {\n            // dealerHand,\n            // dealerValue,\n            // dealerCards\n          // }\n        // })\n        // remove facedown holeCard so this card can be seen\n        // let element = document.getElementsByClassName('holeCard')[0]\n        // element.parentNode.removeChild(element)\n        // dealerNumCards++  // incrases to 2\n      }\n      \n      // check handSize vs num cards currently displayed to tell if more cards required\n      handSize = this.state.dealerHand.length\n      const numCardsToShow = handSize - dealerNumCards\n\n      if (numCardsToShow > 0) {\n        // take numCardsToShow off the end dealer's hand\n        hand = [...this.state.dealerHand]\n        let cardsToShow = hand.splice(-numCardsToShow, numCardsToShow)\n\n        // add hole card\n        // if (numCardsToShow === 1) {\n        //   cardsToShow.unshift(['card', '_back'])\n        // }\n\n        \n        // alert(cardsToShow)\n        // // change position of first 2 cards so that they appear correctly if after initial deal\n        // if (!this.state.isDeal && dealerCards.length > 0) {\n        //   let dealerCards = dealerCards[1]\n        //   dealerCards = dealerCards.splice(1,1)\n        //   dealerCards.unshift(cardToMove)\n        // }\n        \n        // deal dummy hole card (face down)\n        if (this.state.isDeal) {\n          dealerNumCards = 1\n          dealerCards.push(<div className=\"dealerCards cardBg\" style={{visibility: 'hidden', backgroundImage:\"url('/playing_cards/card_back.png')\", height:CARD_HEIGHT+'px', width:CARD_WIDTH+'px', position:\"absolute\", left:this.state.dealerBasePos[0].toString()+'px', top:this.state.dealerBasePos[1].toString()+'px'}}></div>)\n        }\n        // if (numCardsToShow === 1) {\n        //   dealerNumCards = 1  \n        // }\n        cardsToShow.forEach((card, cardNum) => {\n          // alert(`card ${card}`)\n          let leftPosn = this.state.dealerBasePos[0] + (CARD_SPACING_X * dealerNumCards)\n          let topPosn = this.state.dealerBasePos[1] + (CARD_SPACING_Y * dealerNumCards)\n          let image = card[0].toString() + card[1].toString()\n          dealerCards.push(<div className=\"dealerCards cardBg\" style={{visibility: 'hidden', backgroundImage:\"url('/playing_cards/\"+image+\".png')\", height:CARD_HEIGHT+'px', width:CARD_WIDTH+'px', position:\"absolute\", left:leftPosn.toString()+'px', top:topPosn.toString()+'px'}}></div>)\n          dealerNumCards++\n        })\n        // dealerNumCards = cardsToShow.length\n        const dispVal = dVal <= 21 ? dVal : 'Bust'\n        dealerValue = (<div className=\"dealerValue\" style={{visibility: 'hidden', position:\"absolute\", left:(this.state.dealerBasePos[0]+parseInt(CARD_WIDTH)+CARD_SPACING_X+3).toString()+'px', top:(this.state.dealerBasePos[1]-3).toString()+'px'}}>{dispVal}</div>)\n      }\n      // have this outside of new card creation section such that it will update the dealer's cards & value if they stand (>16)\n      this.setState({\n            dealerCards,\n            dealerValue,\n            isDeal: false\n        })\n    }\n  }\n\n\n  dispResults1s = (gameParams) => {\n    // show all 'bet' and 'value' elements\n    for (let h1 of document.getElementsByClassName('hand1')) {\n      h1.style.animationName= 'none'\n    }\n    for (let h2 of document.getElementsByClassName('hand2')) {\n      h2.style.animationName= 'none'\n    }\n    for (let dh of document.getElementsByClassName('dealerCards')) {\n      dh.style.animationName= 'none'\n    }  \n    this.dispResultsNow(gameParams)\n    \n  }\n\n\n  dispResultsNow = (gameParams) => {\n    // show all 'bet' and 'value' elements\n    for (let h1 of document.getElementsByClassName('hand1')) {\n      h1.style.animationName= 'show'\n    }\n    for (let h2 of document.getElementsByClassName('hand2')) {\n      h2.style.animationName= 'show'\n    }\n    for (let dh of document.getElementsByClassName('dealerCards')) {\n      dh.style.animationName= 'show'\n    }  \n\n    // update high score\n    const newBalance = gameParams['balance']\n    if (newBalance > localStorage.getItem('highScore')) {\n      localStorage.setItem('highScore', newBalance)\n    }\n\n    // change state to 'results'\n    this.setState({\n      gameState: 'results',\n      balance: gameParams['balance'],\n      result: gameParams['result'],\n      guide: ''\n    })\n  }\n\n\n  playAgain = (roundOrGame) => {\n    if (roundOrGame === 'game') { \n      this.talkToPython('restartGame', null)\n      this.setState({\n        balance: START_BAL \n      })\n    } else {\n      this.talkToPython('playAgain', null)\n    }\n    this.setState({\n      gameState: 'bet',\n      guide: '',\n      result: '',\n      betHand1: null,\n      betHand2: null,\n      playerHand1: [],\n      playerHand2: [],\n      playerValue1: null,\n      playerValue2: null,\n      playerCards1: [],\n      playerCards2: [],\n      handNum: 0,\n      dealerHand: [],\n      dealerValue: null,\n      dealerCards: [],\n      turn: 'me',\n      activeHand: null,\n      legalMoves: null,\n      optimalMove: '',\n      playerBasePos: [678, 480],\n      dealCards: [],\n      hasSplit: false,\n      isDeal: true,\n    })\n    dealerNumCards = 0\n    playerNumCardsHand1 = 0\n    playerNumCardsHand2 = 0\n    pVal1 = null\n    pVal2 = null\n    pBet1 = null\n    pBet2 = null\n    dVal = null\n  }\n\n\n  highlightActiveHand = () => {\n    // pulse the active hand\n    if (this.state.turn === 'me') {\n      if (this.state.handNum === 0) {\n        // highlight first hand\n        for (let hand1 of document.getElementsByClassName('hand1')) {\n          hand1.style.animationName= 'pulseHand'\n        }\n      } else {\n        // highlight second hand\n        for (let hand2 of document.getElementsByClassName('hand2')) {\n          hand2.style.animationName= 'pulseHand'\n        }\n        for (let hand1 of document.getElementsByClassName('hand1')) {\n          hand1.style.animationName= 'show'\n        }\n      }\n    }\n  }\n\n\n  highlightLegalMoves = () => {\n    this.state.legalMoves.forEach((move) => {\n      let ele = document.getElementsByClassName(move.toLowerCase())[0]\n      ele.style.animationName= 'pulseMoves'\n    })\n  }\n\n\n  showCurrentCardsPerm = () => {\n    // add all cards on screen to a class which displays them in 1 scond\n    for (let h1 of document.getElementsByClassName('hand1Cards')) {\n      h1.classList.add(\"cardsShown\")\n    }\n    // for (let h1 of document.getElementsByClassName('hand1')) {\n    //   // adjust\n    //   h1.classList.add(\"cardsShown\")\n    // }\n    for (let h2 of document.getElementsByClassName('hand2Cards')) {\n      h2.classList.add(\"cardsShown\")\n    }  \n    // // ADJUST\n    // for (let h2 of document.getElementsByClassName('hand2')) {\n    //   h2.classList.add(\"cardsShown\")\n    // }\n    for (let dh of document.getElementsByClassName('dealerCards')) {\n      dh.classList.add(\"cardsShown\")\n    }  \n  }\n\n\n  cleanShownCards = () => {\n    // removes all cards on screen from their specific hand class\n    let hand1Cards = document.getElementsByClassName('hand1Cards')\n    while(hand1Cards.length > 0){\n      hand1Cards[0].classList.remove('hand1Cards');\n    }\n    let hand2Cards = document.getElementsByClassName('hand2Cards')\n    while(hand2Cards.length > 0){\n      hand2Cards[0].classList.remove('hand2Cards');\n    }\n    let dc = document.getElementsByClassName('dealerCards')\n    while(dc.length > 0){\n      dc[0].classList.remove('dealerCards');\n    }\n  }\n\n\n  unhighlightHands = () => {\n  // set active hand's 'bet' and 'value' elements to animation 'none', causing them to disappear \n  ////// set active hand's bet and value to visible through 'show' animation\n    if (this.state.turn === 'me') { \n      if (this.state.handNum === 0) {\n        for (let h1 of document.getElementsByClassName('hand1')) {\n          // h1.style.animationName= 'show'\n          h1.style.animationName= 'none'\n        }\n      } else {\n        for (let h2 of document.getElementsByClassName('hand2')) {\n          // h2.style.animationName= 'show'\n          h2.style.animationName= 'none'\n        }\n      } \n    } else {\n      for (let dh of document.getElementsByClassName('dealerValue')) {\n        // dh.style.animationName= 'show'\n        dh.style.animationName= 'none'\n      }\n    }  \n  }\n\n  unhighlightHandsStand = () => {\n    // view 'bet' and 'value' for all player's hands immediately\n    if (this.state.turn === 'me') { \n      if (this.state.handNum === 0) {\n        for (var h1 of document.getElementsByClassName('hand1')) {\n          h1.style.animationDelay='0s'\n          h1.style.animationName= 'show'\n        }\n      } else {\n        for (var h2 of document.getElementsByClassName('hand2')) {\n          h2.style.animationDelay='0s'\n          h2.style.animationName= 'show'\n        }\n      }   \n    }\n  }\n\n\n  unhighlightLegalMoves = () => {\n    for (var but of document.getElementsByClassName('playButtonAnimation')) {\n      but.style.animationName= 'none'\n    }\n  }\n}\n\n\nconst STARTPOSN = 14\nconst CHIPWIDTH = 80\nconst CHIPSPACING = 17\n\nclass Betting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bet: this.props.prevBet,\n      maxBetReached: false,\n      noBetAlert: ''\n    }\n  }\n\n\n  componentDidMount = () => {\n    // catches case where player nearly bankrupt\n    if (this.props.prevBet > this.props.balance) {\n      this.setState({\n        bet: 0\n      })\n    }\n  }\n\n\n  render () {\n    const chipsButtons = [1, 5, 25, 50, 100].map((chipValue, idx) => {\n      return (\n        <button className=\"defStyle\" key={idx} onClick={this.addChip} value={chipValue} style={{position:'absolute', left:STARTPOSN+(idx*(CHIPWIDTH+CHIPSPACING)), top:(100-CHIPWIDTH)/2, height:CHIPWIDTH, width:CHIPWIDTH, borderStyle:'none'}}></button>\n      )\n    })\n\n    let maxBetAlert = ''\n    if (this.state.maxBetReached) {\n      maxBetAlert = 'Insufficient balance!'\n    }\n    \n    return (\n      <div>\n        <div className=\"chips\">{chipsButtons}</div>\n        <div className=\"bettingGuide\">Select chips, then place bet!</div>\n        <div className=\"currentBalance\">Balance: ${this.props.balance}</div>\n        <button className=\"clearButton\" onClick={this.clearBets}>Clear</button>\n        <button className=\"betButton\" onClick={() => this.placeBet(this.state.bet)} autoFocus>Place Bet</button>\n        <button className=\"betAmount\" onClick={this.clearBets}>${this.state.bet}</button>\n        <div className=\"maxBetText\">{maxBetAlert}</div>\n        <div className=\"maxBetText\">{this.state.noBetAlert}</div>\n      </div>\n    )\n  }\n\n\n  placeBet = (bet) => {\n    if (bet === 0) {\n      this.setState({\n        noBetAlert: \"Can't bet nothing!\"\n      })\n    } else {\n      this.props.placeBet(bet)\n    }\n  }\n\n\n  addChip = (event) => {\n    let chipValue = parseInt(event.target.value)\n    let currBalance = this.props.balance\n    if (this.state.bet + chipValue > currBalance) {\n      this.setState({\n        maxBetReached: true,\n        noBetAlert: ''\n      })  \n    } else {\n      this.setState(state => ({\n        bet: state.bet + chipValue,\n        maxBetReached: false,\n        noBetAlert: ''\n      }))  \n    }  \n  }\n\n\n  clearBets = () => {\n    this.setState({\n      bet: 0,\n      maxBetReached: false,\n      noBetAlert: ''\n    })\n  }\n}\n\n\n\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      optimalChecked: true\n    }\n  }\n\n\n  render () {\n    let showResults = undefined\n    // only show 'restart game' button when balance on 0\n    let playAgainButton = undefined\n    if (this.props.balance === 0) {\n      playAgainButton = <button className=\"playAgain playButton\" onClick={() => {this.props.playAgain('game')}}>Restart Game</button>\n    } else {\n      playAgainButton = <button className=\"playAgain playButton\" onClick={() => {this.props.playAgain('round')}} autoFocus>Deal Again</button>\n    }\n    \n    let optimalMove = ''\n    if (this.state.optimalChecked) {\n      optimalMove = (<div className=\"optimalMove\" style={{top:\"755px\", left:\"815px\"}}>: {this.props.optimalMove}</div>)\n    }\n\n    // results\n    if (this.props.gameState === 'results') {\n      showResults = (\n        <div>\n          <span>{playAgainButton}</span>\n          <div className=\"resultsBox\">{this.props.result}</div>\n        </div>\n      )\n    }\n\n    // play\n    let showPlayButtons = undefined\n    let showPlayerCards1 = undefined\n    let showPlayerCards2 = undefined\n    let showDealerCards = undefined\n    if (this.props.gameState === 'play') {\n      showPlayButtons = (\n            <div>\n              <button className=\"hit playButton playButtonAnimation\" name=\"Hit\" onClick={this.play} autoFocus>Hit</button>\n              <button className=\"stand playButton playButtonAnimation\" name=\"Stand\" onClick={this.play}>Stand</button>\n              <button className=\"double playButton playButtonAnimation\" name=\"Double\" onClick={this.play}>Double</button>\n              <button className=\"split playButton playButtonAnimation\" name=\"Split\" onClick={this.play}>Split</button>\n              <div className=\"optimalMove\" style={{position:\"absolute\", top:\"755px\", left:\"609px\"}}>Show Optimal Move</div>\n              <input type=\"checkbox\" id=\"_checkbox\" onClick={this.toggleOptCheckbox}></input>\n              <label htmlFor=\"_checkbox\">\n                <div id=\"tick_mark\"></div>  \n              </label>\n              {optimalMove}\n              <div className=\"guide\">Choose to Hit, Stand, Double, or Split!</div>\n            </div>\n      )\n    }\n\n    showPlayerCards1 = this.props.playerCards1.map((card) => {\n      return card\n    })\n    showPlayerCards2 = this.props.playerCards2.map((card) => {\n      return card\n    })\n\n    showDealerCards = this.props.dealerCards.map((card) => {\n      return card\n    })\n\n    return (\n      <div>\n        <div className=\"dealer\" >{this.props.dealerValue}</div>\n        <div>{this.props.playerValue1}</div>\n        <div>{this.props.playerValue2}</div>\n        <div>{this.props.betHand1}</div>\n        <div>{this.props.betHand2}</div>\n        <div className=\"defStyle\" style={{position:\"absolute\", left: \"550px\", top: \"320px\"}}>Dealer</div>\n        <div className=\"defStyle handValue\" style={{position:\"absolute\", left: \"530px\", top: \"530px\"}}>You</div>\n        {showResults}\n        <div className=\"dealer\" >{showDealerCards}</div>\n        {hand1Border}\n        <div>{showPlayerCards1}</div>\n        {hand2Border}\n        <div>{showPlayerCards2}</div>\n        {showPlayButtons}\n      </div>\n    )\n  }\n\n\n  componentDidMount = () => {\n    document.getElementById(\"_checkbox\").checked = true;\n  }\n\n\n  toggleOptCheckbox = () => {\n    if (this.state.optimalChecked) {\n      document.getElementById(\"_checkbox\").checked = false;\n    } else {\n      document.getElementById(\"_checkbox\").checked = true;\n    }\n    this.setState(state => {\n     return {\n      optimalChecked: !state.optimalChecked\n     } \n    })\n  }\n\n\n  play = (event) => {\n    const move = event.target.name\n    this.props.playMove(move)\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}